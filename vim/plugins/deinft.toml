# deinft.toml

[ftplugin]

_ = '''
" General {{{

"}}}
'''

osa = '''
"osa {{{

  let g:quickrun_config.osa = {
    \  'exec'                            : [ '%c -l JavaScript %s:p:r.osa' ]
    \ ,'command'                         : 'osascript'
  \}

"}}}
'''

dependencies = '''
" dependencies {{{

function! s:vimrc_dependencies() abort
  let &l:filetype   = 'dependencies'
  let &l:dictionary = &l:dictionary . ',' . expand('~/.vim/dictionary/dependencies.dic', 1)
endfunction
call s:vimrc_dependencies()

"}}}
'''

fsharp = '''
"fsharp {{{

  function! s:vimrc_fsharp() abort
    let &l:errorformat   = '%f(%l\,%c):\ %m,%-G %.%#,%-G,%-G%[%^/]%.%#'
    let &l:previewheight = 5
    let &l:splitbelow    = 0
    let &l:foldmethod    = 'indent'
    let &l:foldlevel     = 1
    let &l:foldminlines  = 3
  endfunction

  call s:vimrc_fsharp()

  " ---------------------------------------------------------
  "                   Setting for QuickRun
  " ---------------------------------------------------------

  if has('mac')
    let s:command = 'fsharpi --readline-'
  elseif has('win32')
    let s:command = 'fsi'
  elseif has('unix')
    let s:command = 'fsharpi'
  else
    let s:command = 'fsharpi'
  endif

  let g:quickrun_config.fsharp      = {}
  let g:quickrun_config.fsharpCheck = {}
  let g:quickrun_config.fsharpi     = {}

  let g:quickrun_config.fsharp = {
    \  'command'                          : s:command
    \ ,'runner'                           : 'concurrent_process'
    \ ,'runner/concurrent_process/load'   : '#load "%S";;'
    \ ,'runner/concurrent_process/prompt' : '> '
    \ ,'hook/time/format'                 : "\n*** time : %g s ***"
    \ ,'hook/time/dest'                   : ''
    \ ,"outputter/buffer/split"           : 'vertical'
  \}

  let g:quickrun_config.fsharpCheck = {
    \  'command'                          : s:command
    \ ,'runner'                           : 'concurrent_process'
    \ ,'runner/concurrent_process/load'   : '#load "%S";;'
    \ ,'runner/concurrent_process/prompt' : '> '
    \ ,'hook/time/enable'                 : 0
    \ ,"outputter/buffer/close_on_empty"  : 1
    \ ,"outputter"                        : 'quickfix'
    \ ,'outputter/buffer/split'           : ':set splitblow',
  \}

  let g:quickrun_config.fsharpi = {
    \  'exec'    : [ '%c %s:p:r.fsx' ]
    \ ,'command' : 'fsharpi'
    \ ,'args'    : '%{input("args> ")}'
  \}

  " " very unstable (^_^;;
  " " https://github.com/thinca/vim-quickrun/issues/175
  " if has('nvim') || has('gui_running')
  "   autocmd callmekohei-vimrc BufWinEnter,BufWritePost *.fsx call quickrun#run( g:quickrun_config.fsharpCheck )
  " else
  "   autocmd callmekohei-vimrc BufWritePost *.fsx call quickrun#run( g:quickrun_config.fsharpCheck )
  " endif

"}}}
'''

help = '''
" help {{{

" setlocal iskeyword+=:
" setlocal iskeyword+=#
" setlocal iskeyword+=-

" Japanese help text
" let &g:helplang = 'ja,en'
let &g:helplang = 'ja'

" Open Vim internal help by K command
let &g:keywordprg = ':help'

" Close by q
nnoremap <nowait><silent><buffer>q :quit<CR>

setlocal foldmethod=indent

"}}}
'''

markdown = '''
" markdown {{{


"}}}
'''

memo = '''
" memo {{{

  function! s:vimrc_memo() abort
    let &l:filetype    = 'memo'
    let &l:foldmethod  = 'marker'
    let &l:tabstop     = 2
    let &l:softtabstop = 2
    let &l:shiftwidth  = 2
    let &l:ambiwidth   = 'double'
    let &l:wrap        = 1
    let &l:display     = 'lastline'
  endfunction

  call s:vimrc_memo()

  " http://vim.wikia.com/wiki/Different_syntax_highlighting_within_regions_of_a_file
  function! s:textEnableCodeSnip(filetype,start,end,textSnipHl) abort "{{{
    let ft=toupper(a:filetype)
    let group='textGroup'.ft
    if exists('b:current_syntax')
      let s:current_syntax=b:current_syntax
      " Remove current syntax definition, as some syntax files (e.g. cpp.vim)
      " do nothing if b:current_syntax is defined.
      unlet b:current_syntax
    endif
    execute 'syntax include @'.group.' syntax/'.a:filetype.'.vim'
    try
      execute 'syntax include @'.group.' after/syntax/'.a:filetype.'.vim'
    catch
    endtry
    if exists('s:current_syntax')
      let b:current_syntax=s:current_syntax
    else
      unlet b:current_syntax
    endif
    execute 'syntax region textSnip'.ft.'
    \ matchgroup='.a:textSnipHl.'
    \ start="'.a:start.'" end="'.a:end.'"
    \ contains=@'.group
  endfunction

  " Enable syntax highlight between triple back-ticks
  let s:lst = ['fsharp','vim','sh','python']
  call map( s:lst, { i,v ->
      \ call( 's:textEnableCodeSnip', [v, '```' . v , '```' , 'SpecialComment'] )
      \ })

  "}}}
"}}}
'''

python = '''
" python {{{



function! s:vimrc_python() abort
  setlocal foldmethod=indent
  setlocal softtabstop=4
  setlocal shiftwidth=4
  setlocal textwidth=80
  setlocal smarttab
  setlocal expandtab
  setlocal nosmartindent
endfunction

let g:quickrun_config.python = {}
let g:quickrun_config.python = { 'command': 'python3' }

call s:vimrc_python()

"}}}
'''

qf = '''
"qf {{{

" https://gist.github.com/juanpabloaj/5845848#file-adjustwindowheight-vim

function! s:adjustWindowHeight(minheight, maxheight)
  let l = 1
  let n_lines = 0
  let w_width = winwidth(0)
  while l <= line('$')
    " number to float for division
    let l_len = strlen(getline(l)) + 0.0
    let line_width = l_len/w_width
    let n_lines += float2nr(ceil(line_width))
    let l += 1
  endw
  exe max([min([n_lines, a:maxheight]), a:minheight]) . "wincmd _"
endfunction

call s:adjustWindowHeight(3, 10)


"}}}
'''

quickrun = '''
"quickrun {{{

  nnoremap <nowait><silent><buffer> q :quit<CR>
  setlocal wrap

"}}}
'''

sh = '''
  " shell {{{

  function! s:vimrc_bash() abort

    let g:is_bash      = 1
    let g:sh_no_error  = 1

    let &l:tabstop     = 2
    let &l:softtabstop = 2
    let &l:shiftwidth  = 2
    let &l:foldmethod  = 'markder'
    let &l:errorformat = '%f:\ line\ %l:\ %m'

    " quickrun settings
    let g:quickrun_config.sh        = {}
    let g:quickrun_config.bashCheck = {}

    let g:quickrun_config.sh        = { 'command': 'bash' }
    let g:quickrun_config.bashCheck = {
      \  'exec'                            : [ '%c -n %s:p:r.bash' ]
      \ ,'command'                         : 'bash'
      \ ,'hook/time/enable'                : 0
      \ ,"outputter/buffer/close_on_empty" : 1
      \ ,"outputter"                       : 'quickfix'
      \ ,'outputter/buffer/split'          : ':set splitblow',
    \}

  endfunction

  call s:vimrc_bash()

  "}}}
'''

todoedit = '''
" todoedit {{{

  let g:deoplete_todoedit_defaultContext = '06-09 09-12 12-15 15-18 18-21 21-24 PROJECT OFFICE'
  let g:deoplete_todoedit_defaultFolder = ' TMP HURRY SomeDay'

"}}}
'''

toml = '''
" toml {{{

" vim:foldmethod=marker

function! s:vimrc_toml() abort
  setlocal tabstop=2 softtabstop=2 shiftwidth=2
  setlocal foldmethod=marker
  let b:partedit_opener   = 'vsplit'
  let b:partedit_filetype = 'vim'
  syntax sync minlines=500
endfunction

call s:vimrc_toml()

"}}}
'''

vim = '''
" vim {{{

if line('$') > 1000
  syntax sync minlines=200
endif

function! s:vimrc_vim() abort

  let g:vim_indent_cont = 2
  let &l:tabstop        = 2
  let &l:softtabstop    = 2
  let &l:shiftwidth     = 2
  let &l:foldmethod     = 'markder'

endfunction

call s:vimrc_vim()

" }}}
'''
