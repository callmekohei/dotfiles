" callmekohei's vimrc

" prepare {{{

if &compatible
  set nocompatible
endif

" encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-boms,utf-8,euc-jp,cp932
set fileformats=unix,dos,mac
if !has('gui_running') && &encoding != 'utf-8'
  set termencoding=utf-8
endif

" vimrc's scriptencoding
scriptencoding utf-8

" create autocmd group
augroup callmekohei-vimrc
  autocmd!
augroup END

" Use English interface.
language message C

" }}}
" prepare for gvim {{{

" Disable menu.vim
if has('gui_running')
  set guioptions=Mc
endif

" }}}
" plugins {{{

autocmd callmekohei-vimrc CursorHold *.toml syntax sync minlines=300

let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)
  let s:toml_dir = expand('~/.config/nvim')
  call dein#load_toml(s:toml_dir . '/dein.toml'    , {'lazy': 0})
  call dein#load_toml(s:toml_dir . '/deinlazy.toml', {'lazy': 1})
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
    call dein#add('callmekohei/tigaDebugger')
  endif
  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

" turn plugins on
syntax on
filetype plugin indent on

" }}}
" options {{{

" Color scheme（ set on gvimrc in MacVim )
set background=dark
colorscheme Apprentice

" Search
set ignorecase
set smartcase
set incsearch
set hlsearch
set wrapscan

" Edit
set tabstop=4 softtabstop=4 shiftwidth=4
set expandtab smarttab
set autoindent "smartindent
set backspace=indent,eol,start
set noshowmatch
set wildmenu
set formatoptions+=mM " テキスト挿入中の自動折り返しを日本語に対応させる

" View
set number                                                 " 行番号を非表示 (number:表示)
set noruler                                                " ルーラーを表示 (noruler:非表示)
set list                                                   " タブや改行を非表示 (list:表示)
set listchars=tab:▸\ ,trail:-,extends:»,precedes:«,nbsp:%  " どの文字でタブや改行を表示するかを設定
set nowrap                                                 " 長い行を折り返して表示 (nowrap:折り返さない)
set laststatus=2                                           " 常にステータス行を表示 (詳細は:he laststatus)
set cmdheight=2                                            " コマンドラインの高さ (Windows用gvim使用時はgvimrcを編集すること)
set noshowcmd                                              " コマンドをステータス行に表示（noshowcmd；非表示）
set title                                                  " タイトルを表示

" mouse
set mouse=a       " どのモードでもマウスを使えるようにする
set nomousefocus  " マウスの移動でフォーカスを自動的に切替えない (mousefocus:切替る)
set nomousehide   " 入力時にマウスポインタを隠す (nomousehide:隠さない)
" set guioptions+=a " ビジュアル選択(D&D他)を自動的にクリップボードへ (:help guioptions_a)

" clipboard
if (!has('nvim') || $DISPLAY != '') && has('clipboard')
  if has('unnamedplus')
    set clipboard& clipboard+=unnamedplus
  else
    set clipboard& clipboard+=unnamed
  endif
endif

" others
set lazyredraw  " stop rendering duraing command executing
set hidden      " Display another buffer when current buffer isn't saved.
set splitright  " Splitting a window will put the new window right the current one.
set ttyfast     " fast mouse scroll

" Disable bell.
set t_vb=
set novisualbell
set belloff=all

" Don't create backup.
set nowritebackup
set nobackup
set noswapfile
set backupdir-=.

" }}}
" key mappings {{{

let g:mapleader      = "\<Space>"
let g:maplocalleader = "\<Space>"

" Folding ( http://d.hatena.ne.jp/leafcage/20111223/1324705686 )
noremap <localleader>j zj
noremap <localleader>k zk
noremap <localleader>n ]z
noremap <localleader>p [z
noremap <localleader>h zc
noremap <localleader>l zo
noremap <localleader>a za
noremap <localleader>m zM
noremap <localleader>i zMzv
noremap <localleader>r zR
noremap <localleader>f zf

" Cancel hilight search
nnoremap <silent><Esc><Esc> :<C-u>nohlsearch<CR><C-l>

" Search by selected word/sentence ( Practical Vim (ja) : https://pragprog.com/titles/dnvim/source_code )
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>
function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" Editor lines
nnoremap j gj
nnoremap k gk

" buffers
nnoremap <silent> <C-j> :bprevious<CR>
nnoremap <silent> <C-k> :bnext<CR>

" Switch CWD to the directory of the open buffer
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" yank half
nnoremap Y y$

" max window size ( https://qiita.com/grohiro/items/e3dbcc93510bc8c4c812 )
let g:toggle_window_size = 0
function! ToggleWindowSize()
  if g:toggle_window_size == 1
    exec "normal \<C-w>="
    let g:toggle_window_size = 0
  else
    :resize
    :vertical resize
    let g:toggle_window_size = 1
  endif
endfunction
nnoremap M :call ToggleWindowSize()<CR>

" vimrc
nnoremap <Space>v :edit $MYVIMRC<CR>

" memo
nnoremap <Space>, :MemoNew<CR>
nnoremap <Space>. :MemoList<CR>
nnoremap <Space>/ :MemoGrep<CR>

" }}}
" filetypes {{{
" tododraft {{{

  function! s:foo() abort

    " todoリストを簡単に入力する
    abbreviate tl - [ ]

    function! ToggleCheckbox()
      let l:line = getline('.')
      if l:line =~ '^\-\s\[\s\]'
        let l:result = substitute(l:line, '^-\s\[\s\]', '- [x]', '')
        call setline('.', l:result)
      elseif l:line =~ '^\-\s\[x\]'
        let l:result = substitute(l:line, '^-\s\[x\]', '- [ ]', '')
        call setline('.', l:result)
      end
    endfunction

    " todoリストのon/offを切り替える
    nnoremap <buffer> <Leader><Leader> :call ToggleCheckbox()<CR>

  endfunction


  autocmd callmekohei-vimrc BufNewFile,BufRead tododraft.txt call s:foo()

" }}}
" General, Text, Markdown {{{

  autocmd callmekohei-vimrc BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
  autocmd callmekohei-vimrc FileType text,markdown setlocal ambiwidth=double wrap display=lastline

  " Remove space at end of line ( exception: markdown, text )
  autocmd callmekohei-vimrc BufWritePre * if index(['markdown','text'], &ft)==-1 | :%s/\s\+$//e | endif

" }}}
" markdown{{{
  " " 折り返しを有効にする
  " set wrap
  " " 80文字で折り返す
  " set textwidth=80
  " " マルチバイト文字の場合も折り返しを有効にする
  " set formatoptions+=m
  " " todoリストを簡単に入力する
  " abbreviate tl - [ ]
  " " todoリストのon/offを切り替える
  " nnoremap <buffer> <Leader><Leader> :call ToggleCheckbox()<CR>

  " function! ToggleCheckbox()
  "   let l:line = getline('.')
  "   if l:line =~ '^\-\s\[\s\]'
  "     let l:result = substitute(l:line, '^-\s\[\s\]', '- [x]', '')
  "     call setline('.', l:result)
  "   elseif l:line =~ '^\-\s\[x\]'
  "     let l:result = substitute(l:line, '^-\s\[x\]', '- [ ]', '')
  "     call setline('.', l:result)
  "   end
  " endfunction
" }}}
" Toml {{{

  autocmd callmekohei-vimrc FileType toml setlocal tabstop=2 softtabstop=2 shiftwidth=2

" }}}
" Vim script {{{

  autocmd callmekohei-vimrc BufNewFile,BufRead vimrc,gvimrc setfiletype vim
  autocmd callmekohei-vimrc FileType vim setlocal tabstop=2 softtabstop=2 shiftwidth=2

" }}}
" QuickFix {{{

  " code from : https://gist.github.com/juanpabloaj/5845848#file-adjustwindowheight-vim
  autocmd callmekohei-vimrc FileType qf call AdjustWindowHeight(3, 10)
  function! AdjustWindowHeight(minheight, maxheight)
    let l = 1
    let n_lines = 0
    let w_width = winwidth(0)
    while l <= line('$')
    " number to float for division
    let l_len = strlen(getline(l)) + 0.0
    let line_width = l_len/w_width
    let n_lines += float2nr(ceil(line_width))
    let l += 1
    endw
    exe max([min([n_lines, a:maxheight]), a:minheight]) . "wincmd _"
  endfunction

" }}}
" Bash script {{{

  autocmd callmekohei-vimrc FileType sh call s:vimrc_bash()
  function! s:vimrc_bash() abort
    let g:is_bash = 1
    let g:sh_no_error = 1
    let &errorformat = '%f:\ line\ %l:\ %m'
  endfunction

  " quickrun settings
  let g:quickrun_config.sh = {}
  let g:quickrun_config.sh = { 'command': 'bash' }
  let g:quickrun_config.bashCheck = {}
  let g:quickrun_config.bashCheck = {
    \  'exec'                            : [ '%c -n %s:p:r.bash' ]
    \ ,'command'                         : 'bash'
    \ ,'hook/time/enable'                : 0
    \ ,"outputter/buffer/close_on_empty" : 1
    \ ,"outputter"                       : 'quickfix'
    \ ,'outputter/buffer/split'          : ':set splitblow',
  \}
  autocmd callmekohei-vimrc BufWinEnter,BufWritePost *.bash call quickrun#run( g:quickrun_config.bashCheck )

" }}}
" dependencies {{{

  autocmd callmekohei-vimrc BufNewFile,BufRead *.dependencies call s:vimrc_dependencies()
  function! s:vimrc_dependencies() abort
    setlocal filetype=dependencies
    setlocal dictionary+=~/tmp/mydictionary/foo_dictionary
  endfunction

" }}}
" Python {{{

  let g:quickrun_config.python = {}
  let g:quickrun_config.python = { 'command': 'python3' }
  autocmd callmekohei-vimrc BufRead,BufNewFile *.pdbrc setfiletype python

" }}}
" }}}
" nvim {{{

if has('nvim')
  let g:python_host_prog  = '/usr/local/bin/python2'
  let g:python3_host_prog = '/usr/local/bin/python3'

  if exists('&inccommand')
    set inccommand=nosplit
  endif

  " enable to local syntax highlight
  set runtimepath+=$HOME/.vim
endif

" }}}
" mac {{{

" Macではデフォルトの'iskeyword'がcp932に対応しきれていないので修正 (https://github.com/koron/vim-kaoriya/blob/master/kaoriya/vim/vimrc#L221)
if has('mac')
  set iskeyword=@,48-57,_,128-167,224-235
endif

" ふむ〜 日本語自動offをon にするとなんとなく挙動がおかしくなる・・・
" if has('mac')
"   set ttimeoutlen=1
"   let s:async = '&'
"   let s:imeoff = 'osascript -e "tell application \"System Events\" to key code 102"' . ' ' . s:async
"   autocmd callmekohei-vimrc InsertLeave * :call system(s:imeoff)
"   noremap <silent> <ESC> <ESC>:call system(s:imeoff)<CR>
" endif

" }}}
" local {{{

" plugin setting
call textobj#user#plugin('yyy', {} )
call textobj#user#plugin('yyy', {
\ 'bbb': {
\ 'pattern': ["^hook.* = '''","^'''"],
\ 'select-a': 'aP',
\ 'select-i': 'iP',
\ },
\ })

command! SelfFileDelete call delete(expand('%'))

command! Space2from4 call s:space4_to_space2()
function! s:space4_to_space2() abort
  set ts=4 sts=4 noet
  retab!
  set ts=2 sts=2 et
  retab
endfunction

command! Space4from2 call s:space2_to_space4()
function! s:space2_to_space4() abort
  set ts=2 sts=2 noet
  retab!
  set ts=4 sts=4 et
  retab
endfunction

" }}}
" __END__  "{{{1
" vim: expandtab softtabstop=2 shiftwidth=2
" vim: foldmethod=marker
" vim: foldcolumn=2
