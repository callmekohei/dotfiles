" callmekohei's vimrc

" Memo {{{
"  delete               : x, dh | <C-h>
"  Jump                 : gf, gF, gx, <C-o>, <C-i>
"  incr, decr           : g<C-a>, g<C-x>
"  toggle comment       : gcc, <C-_><C-_>
"  set dos format       : set ff=dos
"  tab windows          : gt, gT, tabo
"  count lines          : g<C-G>
"  copy for another app : "*y
" }}}

" --------------------------------------------------------
"                     Primary Settings
" --------------------------------------------------------

if &compatible
  set nocompatible
endif

augroup MyAutoCmd
  autocmd!
augroup END

" Use English interface.
language message C

" Encoding {{{

  let &encoding      = 'utf-8' " used inside Vim.
  let &fileencoding  = 'utf-8' " Sets the character encoding for the file of this buffer.
  let &fileencodings = 'ucs-boms,utf-8,cp932,euc-jp,sjis'
  let &fileformats   = 'unix,dos,mac' " linefeed, carriage return
  if !has('gui_running') && &encoding !=# 'utf-8'
    let &termencoding = 'utf-8'
  endif

  if has('mac')
    " For cp932 on mac
    " https://github.com/koron/vim-kaoriya/blob/master/kaoriya/vim/vimrc#L221
    let &iskeyword = '@,48-57,_,128-167,224-235'
  endif

  " vimrc's scriptencoding
  scriptencoding utf-8

" }}}
" Keymap {{{

let g:mapleader      = "\<Space>"
let g:maplocalleader = "\<Space>"

" vimrc
nnoremap <leader>v :<C-u>edit $MYVIMRC<CR>

" Cancel hilight search
noremap <silent><C-l> :<C-u>nohlsearch<CR><C-l>

" buffers
nnoremap <silent> <C-j> :<C-u>bprevious<CR>
nnoremap <silent> <C-k> :<C-u>bnext<CR>

" Search by selected word/sentence ( Practical Vim (ja) : https://pragprog.com/titles/dnvim/source_code )
xnoremap * :<C-u>call <SID>vSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>vSetSearch()<CR>?<C-R>=@/<CR><CR>
function! s:vSetSearch() "{{{
  let temp = @s
  normal! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction "}}}

" Switch CWD to the directory of the open buffer
nnoremap <leader>cd :<C-u>cd %:p:h<cr>:<C-u>pwd<cr>

" }}}
" Folding {{{

if has('folding')

  function! s:myFoldText() abort "{{{

    let l:foldchar = matchstr( &fillchars , 'fold:\zs.' )
    let l:foldtext = getline( v:foldstart )

    " Replace unicode spaces to normal space
    " see also: http://www.unicode.org/versions/Unicode11.0.0/ch06.pdf ( page11 Table 6-2.Unicode Space Characters )
    let l:unicodeSpaces = '\v
	\   %u180E|%u2028|%u2029|%u00A0|%u2000|%u2001
	\  |%u2002|%u2003|%u2004|%u2005|%u2006|%u2007
	\  |%u2008|%u2009|%u200A|%u202F|%u205F|%u3000'
    let l:normalSpace = ' '
    let l:foldtext = substitute( l:foldtext,l:unicodeSpaces , l:normalSpace , 'g' )

    " trim head spaces and tail spaces
    let l:headSpaces = '\v^\s+\ze\S'
    let l:tailSpaces = '\v\s+$'
    let l:foldtext = substitute( l:foldtext,l:headSpaces . '|' . l:tailSpaces , '' , 'g' )

    " trim marker
    let l:marker = '{' . '{' . '{'
    let l:spacesBeforeMarker = '\v\s*("|#)?\s*'
    let l:numbersAfterMarker = '\v\s*\d*'
    let l:tmp = l:spacesBeforeMarker . '\m' . l:marker . l:numbersAfterMarker
    let l:foldtext = substitute( l:foldtext, l:tmp , '', 'g' )

    " trim ("|#)
    let l:foo = '\v\s*("|#)\s*\ze\S'
    let l:foldtext = substitute( l:foldtext, l:foo , '', 'g' )

    return strpart( '+' . repeat(foldchar, v:foldlevel*2) . ' ' . l:foldtext . ' ' , 0 , ( winwidth(0)*2 )/3 )

  endfunction "}}}

  let &foldmethod = 'marker'
  let &foldtext = get( funcref( 's:myFoldText' ), 'name' ) . '()'

  " Folding keymap ( http://d.hatena.ne.jp/leafcage/20111223/1324705686 )
  noremap <leader>j zj
  noremap <leader>k zk
  noremap <leader>n ]z
  noremap <leader>p [z
  noremap <leader>h zc
  noremap <leader>l zo
  noremap <leader>a za
  noremap <leader>m zM
  noremap <leader>i zMzv
  noremap <leader>r zR
  noremap <leader>f zf

endif

" }}}
" Status line {{{

  set wildmode=longest:full,full
  set statusline=%F  " file name
  set statusline+=%= " Right part
  set statusline+=[innerENC=%{&encoding}]
  set statusline+=[FENC=%{&fileencoding}]
  set statusline+=[FF=%{&fileformat}]
  set statusline+=[ROW=%l/%L]
  set laststatus=2   "always display status line

" }}}
" Zenkaku spaces {{{

  autocmd MyAutoCmd ColorScheme * highlight UnicodeSpaces  ctermbg=131  guibg=#af5f5f
  autocmd MyAutoCmd BufRead,BufNewFile * call matchadd(
    \  'UnicodeSpaces'
    \ ,'\v'
    \ . '%u180E|%u2028|%u2029|%u00A0|%u2000|%u2001'
    \ .'|%u2002|%u2003|%u2004|%u2005|%u2006|%u2007'
    \ .'|%u2008|%u2009|%u200A|%u202F|%u205F|%u3000'
    \ )

  " set color scheme
  let &g:background = 'dark'
  colorscheme desert

" }}}
" Man {{{

  if has('vim_starting')
    if ! has('nvim')
      if filereadable($VIMRUNTIME . '/ftplugin/man.vim')
        runtime ftplugin/man.vim
        let g:ft_man_folding_enable = 1
      endif
    endif
  endif

"}}}
" options {{{

  " Diff
  set diffopt=filler,vertical

  " Search
  let &ignorecase = 1
  let &smartcase  = 1
  let &incsearch  = 1
  let &hlsearch   = 1
  let &wrapscan   = 1

  " Edit
  let &tabstop         = 2
  let &softtabstop     = 2
  let &shiftwidth      = 2
  let &expandtab       = 1
  let &smarttab        = 1
  let &autoindent      = 1
  let &smartindent     = 0
  let &backspace       = 'indent,eol,start'
  let &showmatch       = 0
  let &wildmenu        = 1
  let &formatoptions   = 'mM'
  let &virtualedit     = 'block'

  " View
  let &number     = 1
  let &ruler      = 0
  let &list       = 1
  let &listchars  = 'tab:> ,trail:-,nbsp:+,extends:»,precedes:«,'
  let &wrap       = 0
  let &laststatus = 2
  let &cmdheight  = 2
  let &showcmd    = 0
  let &title      = 1

  " mouse
  let &mouse      = 'a'
  let &mousefocus = 0
  let &mousehide  = 0
  if has('win32unix')
    set ttymouse=xterm2
  endif

  " clipboard
  if (!has('nvim') || $DISPLAY !=# '') && has('clipboard')
    if has('unnamedplus')
      let &clipboard = 'unnamedplus'
    else
      let &clipboard = 'unnamed'
    endif
  endif

  " others
  let &lazyredraw = 1
  let &hidden     = 1
  let &splitright = 1
  let &ttyfast    = 1

  " Disable bell.
  let &t_vb       = ''
  let &visualbell = 0
  let &belloff    = 'all'

  " Don't create backup.
  let &writebackup = 0
  let &backup      = 0
  let &swapfile    = 0
  set backupdir-=.

" }}}

" Vim {{{

  " cursor like neovim ( :h terminal-option )
  if has('vim_starting')
    if ! has('nvim')
      if ! has ('gui_running')

        let &t_SI .= "\e[6 q" " start insert mode
        let &t_EI .= "\e[2 q" " end insert mode
        let &t_SR .= "\e[4 q"
        " not work <localleader> if turn on timeoutlen
        " let &timeoutlen = 100

      endif
    endif
  endif

" }}}
" MacVim {{{

  if has('mac')
    if has('gui_running')

      " Disable menu.vim for macvim
      " Needs to load before loading plugins
      let did_install_default_menus = 1
      let did_install_syntax_menu   = 1
      let do_no_lazyload_menus      = 1
      let no_buffers_menu           = 1
      let &g:guioptions = 'Mc'

      " font
      let s:fontName = 'Cica'
      let s:fontSize = 'h16'
      let &g:guifont   = s:fontName . ':' . s:fontSize
      let &g:linespace = 3

      " window size
      let &g:columns   = 80 " width
      let &g:lines     = 30 " hight
      let &g:cmdheight = 2

      " Don't flick cursor.
      setglobal guicursor&
      setglobal guicursor+=a:blinkon0

      " key mappings
      noremap  ; :
      noremap  : ;
      lnoremap ; :
      lnoremap : ;
      tnoremap ; :
      tnoremap : ;

    endif
  endif

" }}}
" neovim {{{

  if has('nvim')

    let g:python_host_prog  = '/usr/local/bin/python2'
    let g:python3_host_prog = '/usr/local/bin/python3'

    if exists('&inccommand')
      let &g:inccommand = 'nosplit'
    endif

  endif

" }}}
" gVim {{{

  if has('win32')
    if has('gui_running')


      " Disable menu.vim
      " Needs to load before loading plugins
      let did_install_default_menus = 1
      let did_install_syntax_menu   = 1
      let do_no_lazyload_menus      = 1
      let no_buffers_menu           = 1
      let &g:guioptions = 'Mc'

      " font
      let s:fontName = 'Migu_2M'
      let s:fontSize = 'h11'
      let &g:guifont   = s:fontName . ':' . s:fontSize
      let &g:linespace = 3

      " window size
      let &g:columns   = 80 " width
      let &g:lines     = 30 " hight
      let &g:cmdheight = 2

      " Don't flick cursor.
      setglobal guicursor&
      setglobal guicursor+=a:blinkon0

      " key mappings
      noremap  ; :
      noremap  : ;
      lnoremap ; :
      lnoremap : ;
      tnoremap ; :
      tnoremap : ;

    endif
  endif

" }}}

" --------------------------------------------------------
"                       My utilities
" --------------------------------------------------------

" Trim tail spaces ( except: markdown, text )
autocmd MyAutoCmd BufWritePre * if index(['markdown','text'], &ft) == -1 | :call s:trimEnd() | endif
inoreabbrev <expr> ---- repeat('-', 60 - col('.'))
" TrimEnd {{{

command! TrimEnd call s:trimEnd()
  function! s:trimEnd() abort "{{{

    " mark origin position
    :normal! ma

    let l:range = '%'

    let l:unicodeSpaces = '\v'
      \ .  '%u180E|%u2028|%u2029|%u00A0|%u2000|%u2001'
      \ . '|%u2002|%u2003|%u2004|%u2005|%u2006|%u2007'
      \ . '|%u2008|%u2009|%u200A|%u202F|%u205F|%u3000'

    let l:space = '\v\s'

    " Trim end spaces
    :execute l:range 'substitute' '/\v(' . l:unicodeSpaces . '|' . l:space . ')+$//ge'

    " back to origin position
    :normal! `a

  endfunction "}}}

"}}}
" Spaces {{{

command! Spaces call s:spaces()
  function! s:spaces() abort "{{{

    " mark origin position
    :normal! ma

    let l:range = '%'

    let l:unicodeSpaces = '\v'
      \ .  '%u180E|%u2028|%u2029|%u00A0|%u2000|%u2001'
      \ . '|%u2002|%u2003|%u2004|%u2005|%u2006|%u2007'
      \ . '|%u2008|%u2009|%u200A|%u202F|%u205F|%u3000'

    let l:space = ' '

    " Replace unicode spaces to normal space
    :execute l:range 'substitute' '/\v(' . l:unicodeSpaces . ')/' . l:space . '/ge'

    " back to origin position
    :normal! `a

  endfunction "}}}

"}}}
" Center2 {{{

  command! -range Center2 call s:center2(<line1>,<line2>)
  function! s:center2(fst,lst) abort
    let l:maxcol = max(map(getline(a:fst,a:lst),'strlen(v:val)'))
    execute (a:fst) "," (a:lst) "center" l:maxcol
  endfunction

" }}}
" DeleteEmptyLines {{{

  command! -range DeleteEmptyLines call s:DeleteEmptyLines(<line1>,<line2>)
  function! s:DeleteEmptyLines(fst,lst) abort
    execute (a:fst) "," (a:lst) 'vglobal/\S/d'
  endfunction

"}}}
" DelNull {{{

  command! DelNull call s:delNull()
  " ^@ is null character ( <C-V><C-Shift-2> on mac)
  " %s/<CTRL-2>//g (on regular PCs)
  " %s/<CTRL-SHIFT-2>//g (on Mac PCs)
  function! s:delNull()
    normal! / 
    %s///g
  endfunction

"}}}
" Space2From4 {{{

  command! -range Space2From4 call s:Space2From4()
  function! s:Space2From4() abort
    let &l:tabstop     = 4
    let &l:softtabstop = 4
    let &l:expandtab   = 0
    retab!
    let &l:tabstop     = 2
    let &l:softtabstop = 2
    let &l:expandtab   = 1
    retab
  endfunction

" }}}
" Space4From2 {{{

  command! -range Center2 call s:center2(<line1>,<line2>)
  command! -range Space4From2 call s:Space4From2(<line1>,<line2>)
  function! s:Space4From2() abort
    let &l:tabstop     = 2
    let &l:softtabstop = 2
    let &l:expandtab   = 0
    retab!
    let &l:tabstop     = 4
    let &l:softtabstop = 4
    let &l:expandtab   = 1
    retab
  endfunction

"}}}
" Toggle window {{{

  " ( https://qiita.com/grohiro/items/e3dbcc93510bc8c4c812 )
  nnoremap M :<C-u>call <SID>toggleWindowSize()<CR>
  let s:toggle_window_size = 0
  function! s:toggleWindowSize()
    if s:toggle_window_size ==# 1
      execute "normal \<C-w>="
      let s:toggle_window_size = 0
    else
      :resize
      :vertical resize
      let s:toggle_window_size = 1
    endif
  endfunction
"}}}

" --------------------------------------------------------
"                   Additional settings
" --------------------------------------------------------

" ===== plugins =====

""" plugins prepare {{{
if has('mac')
  let &g:packpath = $HOME . '/dotfiles/vim'
elseif has('win32unix')
  let &g:packpath = '/y/dotfiles/vim'
elseif has('win32') " gvim
  let &g:packpath = 'Y:\dotfiles\vim'
endif

command! -nargs=0 -bar Helptags
    \  for p in glob('~/.vim/pack/pack1/start/*', 1, 1)
    \|     exe 'packadd ' . fnamemodify(p, ':t')
    \| endfor
    \| helptags ALL

""" }}}

" Apprentice {{{

  function! s:redifineApprenticeHighlight() abort
    highlight Comment        ctermfg=245  guifg=#8a8a8a
    highlight FoldColumn     ctermfg=245  guifg=#8a8a8a
    highlight Folded         ctermfg=245  guifg=#8a8a8a
  endfunction
  autocmd MyAutoCmd ColorScheme * call s:redifineApprenticeHighlight()

  " set color scheme
  let &g:background = 'dark'
  colorscheme Apprentice

" }}}
" deoplete{{{

  " launch deoplete when vim/neovim startup.
  let g:deoplete#enable_at_startup = 1

  autocmd MyAutoCmd VimEnter *.fsx,*.fs call s:foo()

  function s:foo() abort

    call deoplete#custom#option({
      \   'auto_refresh_delay' : 20
      \ , 'min_pattern_length' : 999
      \ , 'ignore_case'        : v:true
      \ , 'refresh_always'     : v:false
    \ })

  endfunction

" }}}
" quickrun {{{

  let g:quickrun_no_default_key_mappings = 1
  let g:quickrun_config   = {}
  let g:quickrun_config._ = {
  \  'runner'                          : 'vimproc'
  \ ,'runner/vimproc/updatetime'       : 60
  \ ,'hook/time/enable'                : 1
  \ ,'hook/time/format'                : "\n*** time : %g s ***"
  \ ,'hook/time/dest'                  : ''
  \ ,"outputter/buffer/split"          : 'vertical'
  \ ,'outputter/buffer/close_on_empty' : 1
  \}

"}}}
" easy-align {{{

  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)

"}}}
" previm{{{

  let g:previm_open_cmd = 'open -a Google\ Chrome'
  let g:previm_enable_realtime = 1

" }}}
" memoList {{{

  if has('mac')
    let g:memolist_path = expand("$HOME/Dropbox/memo",1)
  elseif has('win32unix')
    let g:memolist_path = expand("/y/Dropbox/memo",1)
  elseif has('win32')
    let g:memolist_path = expand('Y:\Dropbox\memo',1)
  endif
  let g:memolist_memo_suffix = "txt"
  let g:memolist_template_dir_path = g:memolist_path
  let g:memolist_ex_cmd = 'CtrlP'
  let g:memolist_ctrlpqfixgrep = 1

  nnoremap <leader>, :MemoNew<CR>
  nnoremap <leader>. :MemoList<CR>
  nnoremap <leader>/ :MemoGrep<Space>

"}}}
" tsuquyomi {{{

  autocmd InsertLeave,TextChanged,BufWritePost *.ts,*.tsx call tsuquyomi#asyncGeterr(1000)

" }}}
" tomtom/tcomment_vim {{{

  if !exists('g:tcomment_types')
    let g:tcomment_types = {}
  endif
  let g:tcomment_types['']       = '// %s'
  let g:tcomment_types['fsharp'] = '// %s'
  let g:tcomment_types['vbnet'] = "''' %s"

"}}}

" ===== File types =====

" BashScript {{{

  " set filetype
  autocmd MyAutoCmd BufNewFile,BufRead inputrc,bash* setlocal filetype=sh

  function! s:vimrc_bash() abort

    let g:is_bash      = 1
    let g:sh_no_error  = 1

    let &l:foldmethod  = 'marker'
    let &l:errorformat = '%f:\ line\ %l:\ %m'

    " quickrun settings
    " let g:quickrun_config.sh        = {}
    " let g:quickrun_config.bashCheck = {}
    " let g:quickrun_config.sh        = { 'command': 'bash' }
    " let g:quickrun_config.bashCheck = {
    "   \  'exec'                            : [ '%c -n %s:p:r.bash' ]
    "   \ ,'command'                         : 'bash'
    "   \ ,'hook/time/enable'                : 0
    "   \ ,"outputter/buffer/close_on_empty" : 1
    "   \ ,"outputter"                       : 'quickfix'
    "   \ ,'outputter/buffer/split'          : ':set splitblow',
    " \}

  endfunction

  autocmd MyAutoCmd BufRead,BufNewFile *{.sh,.bash,bashrc,inputrc,bash_profile} call s:vimrc_bash()

"}}}
" Vim script {{{

  if line('$') > 1000
    syntax sync minlines=200
  endif

  function! s:vimrc_vim() abort
    let g:vim_indent_cont = 2
    let &l:foldmethod     = 'marker'
  endfunction

  autocmd MyAutoCmd BufRead,BufNewFile *.vim call s:vimrc_vim()

" }}}
" fsharp {{{

set previewheight=5
autocmd CompleteDone * silent! pclose!

let g:quickrun_config.fsharp = {}
let g:quickrun_config.fsharp = {
  \  'exec': ['%c %o']
  \ ,'command'                          : 'fsharpi'
  \ ,'cmdopt'                           : '--readline-'
  \ ,'runner'                           : 'concurrent_process'
  \ ,'runner/concurrent_process/load'   : '#load "%S";;'
  \ ,'runner/concurrent_process/prompt' : '> '
  \ ,'hook/time/format'                 : "\n*** time : %g s ***"
  \ ,'hook/time/dest'                   : ''
  \ ,"outputter/buffer/split"           : 'vertical'
\}

" }}}
" VB {{{

  autocmd MyAutoCmd BufRead,BufNewFile *.cls
  \ if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6).getline(7).getline(8).getline(9).getline(10) =~? 'VB_Name\|Begin VB\.\(Form\|MDIForm\|UserControl\)' |
  \   set filetype=vbnet |
  \ elseif getline(1) =~ '^%' |
  \   set filetype=tex |
  \ elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |
  \   set filetype=rexx |
  \ else |
  \   set filetype=st |
  \ endif

  function! s:vimrc_vb() abort
    let &l:foldmethod  = 'syntax'
    let &l:tabstop     = 4
    let &l:softtabstop = 4
    let &l:shiftwidth  = 4
    let &l:ambiwidth   = 'double'
    " encoding
    let &fileencoding  = 'cp932'
    let &fileformat   = 'dos'
    set filetype=vbnet
  endfunction

  autocmd MyAutoCmd BufRead,BufNewFile *{.bas,.cls} call s:vimrc_vb()

  autocmd MyAutoCmd BufWritePre *{.bas,.cls} call s:trimEnd()

" }}}


" --------------------------------------------------------
"                         Finalize
" --------------------------------------------------------

syntax on
filetype plugin indent on

set secure " must be written at the last. see :help 'secure'

" vim: expandtab softtabstop=2 shiftwidth=2
" vim: foldmethod=marker
" vim: foldcolumn=3

