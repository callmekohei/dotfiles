" callmekohei's vimrc

" toml files ( press gf )
" ----------------------------------------------------
" ~/dotfiles/vim/plugins/dein.toml
" ~/dotfiles/vim/plugins/deinlazy.toml
" ~/dotfiles/vim/plugins/deinft.toml
" ----------------------------------------------------

" option flag
let s:ON  = 1 | :lockvar s:ON
let s:OFF = 0 | :lockvar s:OFF

" prepare {{{

  if &compatible
    let &compatible = s:OFF
  endif

  " Neovim defaults option {{{
  if !has('nvim')

    " :h nvim-defaults

    let &autoindent     = s:ON
    let &autoread       = s:ON
    let &backspace      = 'indent,eol,start'
    let &backupdir      = '.' . ',' . expand('~/.local/share/nvim/backup',1)
    let &belloff        = 'all'
    let &complete       = '.,w,b,u,t'
    let &cscopeverbose  = s:ON
    let &directory      = expand('~/.local/share/nvim/swap//',1)
    let &display        = 'lastline,msgsep'
    let &encoding       = 'utf-8'
    let &fillchars      = "vert:│,fold:·"
    let &fsync          = s:OFF
    let &formatoptions  = 'jcroql'
    let &history        = 10000
    let &hlsearch       = s:ON
    let &incsearch      = s:ON
    let &langnoremap    = s:ON
    let &langremap      = s:OFF
    let &laststatus     = 2
    let &listchars      = 'tab:> ,trail:-,nbsp:+'
    let &nrformats      = 'bin,hex'
    let &ruler          = s:ON
    let &sessionoptions = 'blank,buffers,curdir,folds,help,tabpages,winsize'
    let &showcmd        = s:ON
    let &sidescroll     = s:ON
    let &smarttab       = s:ON
    let &tabpagemax     = 50
    let &tags           = './tags,tags'
    let &ttyfast        = s:ON
    let &undodir        = expand('~/.local/share/nvim/undo',1)
    let &viminfo        = "!,'100,<50,s10,h"
    let &wildmenu       = s:ON

  endif
  " }}}

  " encoding
  let &encoding      = 'utf-8'
  let &fileencoding  = 'utf-8'
  let &fileencodings = 'ucs-boms,utf-8,euc-jp,cp932'
  let &fileformats   = 'unix,dos,mac'
  if !has('gui_running') && &encoding !=# 'utf-8'
    let &termencoding = 'utf-8'
  endif

  " vimrc's scriptencoding
  scriptencoding utf-8

  " create autocmd group
  augroup callmekohei-vimrc
    autocmd!
  augroup END

  " Use English interface.
  language message C

  " Disable menu.vim for macvim
  let did_install_default_menus = 1
  let did_install_syntax_menu   = 1
  let do_no_lazyload_menus      = 1
  let no_buffers_menu           = 1
  let &g:guioptions = 'Mc'

" }}} -------------------------------------------------
" plugins managed by dein {{{

  function! s:dein_easy_settings() abort "{{{

    let l:config_home = empty($XDG_CONFIG_HOME) ? expand('~/.config',1) : $XDG_CONFIG_HOME
    let l:cache_home  = empty($XDG_CACHE_HOME)  ? expand('~/.cache',1)  : $XDG_CACHE_HOME
    let l:nvim_home   = l:config_home . '/nvim'
    let l:dein_home   = l:cache_home  . '/dein'
    let l:dein_dir    = l:dein_home   . '/repos/github.com/Shougo/dein.vim'

    if !isdirectory(l:dein_dir )
      call system('git clone --depth 1 https://github.com/Shougo/dein.vim ' . shellescape(l:dein_dir ))
    endif

    let &g:runtimepath = l:dein_dir  . "," . &g:runtimepath

    if dein#load_state(l:dein_home)
      call dein#begin(l:dein_home)

      call dein#load_toml( l:nvim_home . '/dein.toml'    , {'lazy': 0} )
      call dein#load_toml( l:nvim_home . '/deinlazy.toml', {'lazy': 1} )
      call dein#load_toml( l:nvim_home . '/deinft.toml'  , {'lazy': 0} )

      if !has('nvim')
        call dein#add('roxma/nvim-yarp')
        call dein#add('roxma/vim-hug-neovim-rpc')
        " call dein#add('callmekohei/tigaDebugger')
      endif

      call dein#end()
      call dein#save_state()
    endif

    if has('vim_starting') && dein#check_install()
      call dein#install()
    endif

  endfunction "}}}

  autocmd callmekohei-vimrc CursorHold *.toml syntax sync minlines=300
  call s:dein_easy_settings()

  " turn plugins on
  syntax on
  filetype plugin indent on

" }}}
" colorscheme {{{

  " --------------------------------------------------------
  "                  local highlight group
  " --------------------------------------------------------

  function! s:myHighlights() abort
    highlight Comment        ctermfg=245  guifg=#8a8a8a
    highlight FoldColumn     ctermfg=245  guifg=#8a8a8a
    highlight Folded         ctermfg=245  guifg=#8a8a8a
    highlight OptionKeyword  ctermfg=103  guifg=#8787af
    highlight UnicodeSpaces  ctermbg=131  guibg=#af5f5f
  endfunction

  autocmd callmekohei-vimrc ColorScheme * call s:myHighlights()

  " --------------------------------------------------------
  "                     set color scheme
  " --------------------------------------------------------

  let &g:background = 'dark'
  colorscheme Apprentice

  " --------------------------------------------------------
  "             local pattern to highlight group
  " --------------------------------------------------------

  function! s:addLocalPatternHilightGroup() abort

    " unicodeSpaces color
    let l:unicodeSpaces = '\v%u180E|%u2028|%u2029|%u00A0|%u2000|%u2001|%u2002|%u2003|%u2004|%u2005|%u2006|%u2007|%u2008|%u2009|%u200A|%u202F|%u205F|%u3000'
    call matchadd( 'UnicodeSpaces', l:unicodeSpaces )

    " let-option color
    call matchadd( 'OptionKeyword', '\s&\zs\w*\ze$' )
    call matchadd( 'OptionKeyword', '\s&\zs\w*\ze\s')
    call matchadd( 'OptionKeyword', '\s&\(g:\|l:\)\zs\w*\ze\s')

  endfunction

  call s:addLocalPatternHilightGroup()

" }}}
" options {{{

  " Search
  let &ignorecase = s:ON
  let &smartcase  = s:ON
  let &incsearch  = s:ON
  let &hlsearch   = s:ON
  let &wrapscan   = s:ON

  " Edit
  let &tabstop         = 4
  let &softtabstop     = 4
  let &shiftwidth      = 4
  let &expandtab       = s:ON
  let &smarttab        = s:ON
  let &autoindent      = s:ON
  let &smartindent     = s:OFF
  let &backspace       = 'indent,eol,start'
  let &showmatch       = s:OFF
  let &wildmenu        = s:ON
  let &formatoptions   = 'mM'
  let &virtualedit     = 'block'

  " View
  let &number     = s:ON
  let &ruler      = s:OFF
  let &list       = s:ON
  let &listchars  = 'tab:> ,trail:-,nbsp:+,extends:»,precedes:«,'
  let &wrap       = s:OFF
  let &laststatus = 2
  let &cmdheight  = 2
  let &showcmd    = s:OFF
  let &title      = s:ON

  " mouse
  let &mouse      = 'a'
  let &mousefocus = s:OFF
  let &mousehide  = s:OFF

  " clipboard
  if (!has('nvim') || $DISPLAY !=# '') && has('clipboard')
    if has('unnamedplus')
      let &clipboard = 'unnamedplus'
    else
      let &clipboard = 'unnamed'
    endif
  endif

  " others
  let &lazyredraw = s:ON
  let &hidden     = s:ON
  let &splitright = s:ON
  let &ttyfast    = s:ON

  " Disable bell.
  let &t_vb       = ''
  let &visualbell = s:OFF
  let &belloff    = 'all'

  " Don't create backup.
  let &writebackup = s:OFF
  let &backup      = s:OFF
  let &swapfile    = s:OFF
  set backupdir-=.

" }}}
" key mappings {{{

  let g:mapleader      = "\<Space>"
  let g:maplocalleader = "\<Space>"

  " open file by gF, url by gx and Folding line by partEdit
  nnoremap <leader><leader> :call <SID>myOpen()<CR>
  vnoremap <leader><leader> :call <SID>myOpen()<CR>

  " Avoid key mistakes
  nnoremap qqq: <Esc>q:
  nnoremap qqq/ <Esc>q/
  nnoremap q: <Nop>
  nnoremap q/ <Nop>
  nnoremap q? <Nop>

  " Folding ( http://d.hatena.ne.jp/leafcage/20111223/1324705686 )
  noremap <leader>j zj
  noremap <leader>k zk
  noremap <leader>n ]z
  noremap <leader>p [z
  noremap <leader>h zc
  noremap <leader>l zo
  noremap <leader>a za
  noremap <leader>m zM
  noremap <leader>i zMzv
  noremap <leader>r zR
  noremap <leader>f zf

  " Cancel hilight search
  nnoremap <silent><Esc><Esc> :<C-u>nohlsearch<CR><C-l>

  " Search by selected word/sentence ( Practical Vim (ja) : https://pragprog.com/titles/dnvim/source_code )
  xnoremap * :<C-u>call <SID>vSetSearch()<CR>/<C-R>=@/<CR><CR>
  xnoremap # :<C-u>call <SID>vSetSearch()<CR>?<C-R>=@/<CR><CR>
  function! s:vSetSearch()
    let temp = @s
    normal! gv"sy
    let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
    let @s = temp
  endfunction

  " Editor lines
  nnoremap j gj
  nnoremap k gk

  " buffers
  nnoremap <silent> <C-j> :<C-u>bprevious<CR>
  nnoremap <silent> <C-k> :<C-u>bnext<CR>

  " Switch CWD to the directory of the open buffer
  nnoremap <leader>cd :<C-u>cd %:p:h<cr>:<C-u>pwd<cr>

  " yank half
  nnoremap Y y$

  " https://qiita.com/grohiro/items/e3dbcc93510bc8c4c812
  nnoremap M :<C-u>call <SID>toggleWindowSize()<CR>
  let s:toggle_window_size = 0
  function! s:toggleWindowSize()
    if s:toggle_window_size ==# 1
      execute "normal \<C-w>="
      let s:toggle_window_size = 0
    else
      :resize
      :vertical resize
      let s:toggle_window_size = 1
    endif
  endfunction

  " vimrc
  nnoremap <leader>v :<C-u>edit $MYVIMRC<CR>

  " todo
  nnoremap <leader>t :<C-u>edit ~/Dropbox/memo/todo.txt<CR>

  " memo
  nnoremap <leader>, :<C-u>MemoNew<CR>
  nnoremap <leader>. :<C-u>MemoList<CR>
  nnoremap <leader>/ :<C-u>MemoGrep<CR>

" }}}
" filetypes {{{

  " Trim tail spaces ( exception: markdown, text )
  autocmd callmekohei-vimrc BufWritePre * if index(['markdown','text'], &ft) == -1 | :call s:trimEnd() | endif

  " set filetype
  autocmd callmekohei-vimrc BufNewFile,BufRead inputrc,bash_profile setlocal filetype=sh
  autocmd callmekohei-vimrc BufNewFile,BufRead *.dependencies setlocal filetype=dependencies
  autocmd callmekohei-vimrc BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} setlocal filetype=markdown
  autocmd callmekohei-vimrc BufNewFile,BufRead *.memo setlocal filetype=memo
  autocmd callmekohei-vimrc BufRead,BufNewFile *.pdbrc setlocal filetype=python
  autocmd callmekohei-vimrc BufRead,BufNewFile *.osa setlocal filetype=osa syntax=javascript

  autocmd callmekohei-vimrc BufWinEnter,BufWritePost *.bash call quickrun#run( g:quickrun_config.bashCheck )

" }}}
" vim {{{

  " cursor like neovim
  if ! (  has('nvim') && has('gui_running') )
    if has('vim_starting')
      let &t_SI .= "\e[6 q"
      let &t_EI .= "\e[2 q"
      let &t_SR .= "\e[4 q"
      " not work <localleader> if turn on timeoutlen
      " let &timeoutlen = 100
    endif
  endif

" }}}
" macvim {{{

  if has('gui_running')

    " font
    let s:fontName = 'Droid Sans Mono for Powerline Nerd Font Complete'
    let s:fontSize = 'h14'
    let &g:guifont   = s:fontName . ':' . s:fontSize
    let &g:linespace = 3

    " window size
    let &g:columns   = 80 " width
    let &g:lines     = 30 " hight
    let &g:cmdheight = 2

    " Don't flick cursor.
    setglobal guicursor&
    setglobal guicursor+=a:blinkon0

    " key mappings
    noremap  ; :
    noremap  : ;
    lnoremap ; :
    lnoremap : ;
    tnoremap ; :
    tnoremap : ;

  endif

" }}}
" neovim {{{

  if has('nvim')
    let g:python_host_prog  = '/usr/local/bin/python2'
    let g:python3_host_prog = '/usr/local/bin/python3'

    if exists('&inccommand')
      let &g:inccommand = 'nosplit'
    endif

  endif

" }}}
" mac/osx {{{

  " Macではデフォルトの'iskeyword'がcp932に対応しきれていないので修正
  " https://github.com/koron/vim-kaoriya/blob/master/kaoriya/vim/vimrc#L221
  if has('mac')
    let &iskeyword = '@,48-57,_,128-167,224-235'
  endif

  " TODO: needs more infomations!
  " insert mode -> normal mode のときに :w するときに時間がかかる
  if has('mac')

    " set ttimeoutlen=1

    function! s:IME_OFF() abort

      autocmd callmekohei-vimrc InsertLeave * :call system(
      \ 'osascript -e "tell application \"System Events\" to key code 102" &'
      \ )

      " <ESC>: の動作がワンテンポ遅くなる・・・
      noremap <silent><nowait><ESC><ESC>
      \ :nohlsearch<CR><C-l>
      \ :<C-u>call system(
      \ 'osascript -e "tell application \"System Events\" to key code 102" &'
      \ )<CR>

    endfunction

    :call s:IME_OFF()

  endif

  " とりあえず保留 {{{
  " ----------------------------------------------------


  " set iminsert=2
  " set imsearch=2
  " set imcmdline


  " function! ImActivate(active)
  "   if a:active
  "     call system('fcitx-remote -o')
  "   else
  "     call system('fcitx-remote -c')
  "   endif
  " endfunction

  " function ImActivateFunc(active)
  "   if a:active
  "     call system( 'osascript -e "tell application \"System Events\" to key code 102"' )
  "   else
  "     echo 'bar'
  "   " ... 何らかの処理
  "   endif
  "   echo 'hello'
  "   " 戻り値は使われない
  " endfunction

  " TODO
  " function ImStatusFunc()
  "   " let is_active = ...何らかの処理
  "   " return is_active ? 1 : 0
  "   return 1
  " endfunction

  " set imstatusfunc=ImStatusFunc
  " set imactivatefunc=ImActivateFunc
  " set imactivatefunc=ImActivate

  " }}}

" }}}
" util {{{

  " https://qiita.com/sgur/items/9e243f13caa4ff294fa8
  command! -nargs=+ -complete=command Capture QuickRun -type vim -src <q-args>

  command! SelfFileDelete call delete(expand('%',1))

  inoreabbrev <expr> ---- repeat('-', 60 - col('.'))

  function s:myOpenImpl(...) abort "{{{

    let l:s = expand('<cfile>')

    if l:s ==# ''
      return
    endif

    if stridx(l:s,'http') >= 0
      :normal gx
      return
    endif

    let l:fp = split(expand(l:s),':')[0]

    if filereadable(l:fp)
      :normal gF
      return
    endif

    return 9999

  endfunction "}}}
  function! s:myOpen() range "{{{

    if call('foldclosed',[line('.')]) !=# -1

      normal!v
      normal!:
      normal!`<
      let l:fstline = line(".")
      normal!`>
      let l:lstline = line(".")

      execute l:fstline .',' . l:lstline . 'Partedit'

    else

      let l:selectedMultiLines = a:lastline - a:firstline

      if l:selectedMultiLines > 0
        execute a:firstline .',' . a:lastline . 'Partedit'
      else

        let l:s = expand('<cfile>')

        if l:s ==# ''
          execute a:firstline .',' . a:lastline . 'Partedit'
          return
        endif

        if call( 's:myOpenImpl', [] ) == 9999
          execute a:firstline .',' . a:lastline . 'Partedit'
        endif

      endif

    endif

  endfunction "}}}
  function! s:trimEnd() abort "{{{

    :normal! ma

    let l:range = '%'

    " Replace unicode spaces to normal space
    let l:unicodeSpaces  = '\%u00A0\|\%u180E\|\%u2000\|\%u2001\|\%u2002\|\%u2003\|\%u2004\|\%u2005\|\%u2006\|\%u2007\|\%u2008\|\%u2009\|\%u200A\|\%u2028\|\%u2029\|\%u202F\|\%u205F\|\%u3000'
    :execute l:range 'substitute' '/' . l:unicodeSpaces . '/ /ge'

    " trim tail spaces
    let tailSpaces = '\s+$'
    :execute l:range 'substitute' '/\v' . l:tailSpaces . '//ge'

    :normal! `a

  endfunction "}}}
  " do center selected strings {{{

  command! -range Center2 call s:center2(<line1>,<line2>)
  function! s:center2(fst,lst) abort
    let l:maxcol = max(map(getline(a:fst,a:lst),'strlen(v:val)'))
    execute (a:fst) "," (a:lst) "center" l:maxcol
  endfunction

  "}}}
  " cleare selected empty lines {{{

  command! -range ClearEmptyLines call s:clearEmptyLines(<line1>,<line2>)
  function! s:clearEmptyLines(fst,lst) abort
    execute (a:fst) "," (a:lst) 'vglobal/\S/d'
  endfunction

  "}}}
  command! -range Space2from4 call s:space2from4() "{{{
  function! s:space2from4() abort
    let &l:tabstop     = 4
    let &l:softtabstop = 4
    let &l:expandtab   = s:OFF
    retab!
    let &l:tabstop     = 2
    let &l:softtabstop = 2
    let &l:expandtab   = s:ON
    retab
  endfunction "}}}
  command! -range Space4from2 call s:space4from2() "{{{
  function! s:space4from2() abort
    let &l:tabstop     = 2
    let &l:softtabstop = 2
    let &l:expandtab   = s:OFF
    retab!
    let &l:tabstop     = 4
    let &l:softtabstop = 4
    let &l:expandtab   = s:ON
    retab
  endfunction "}}}

" }}}
" __END__  "{{{

  " must be written at the last. see :help 'secure'
  let &g:secure = s:ON

  " vim: expandtab softtabstop=2 shiftwidth=2
  " vim: foldmethod=marker
  " vim: foldcolumn=5

" }}}
