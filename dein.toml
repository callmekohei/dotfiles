# ===========================================================================
#  FILE    : dein.toml
#  AUTHOR  : callmekohei <callmekohei at gmail.com>
# ===========================================================================

#----------------------------------------------------------
# plugin manager
#----------------------------------------------------------

[[plugins]]
repo = 'Shougo/dein.vim'


#----------------------------------------------------------
# Align
#----------------------------------------------------------

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
'''


#----------------------------------------------------------
# auto-complete
#----------------------------------------------------------

# bridge plugin
[[plugins]]
repo = 'roxma/nvim-yarp'
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    " Enable loggin
    "call deoplete#enable_logging("DEBUG", "foo.txt")

    let g:deoplete#enable_at_startup = 1

    call deoplete#custom#option({
    \ 'auto_complete_delay': 0,
    \ 'ignore_case': v:true,
    \ })

    call deoplete#custom#source('_',
    \ 'converters', ['remove_overlap'])
'''


#----------------------------------------------------------
# Color scheme
#----------------------------------------------------------

[[plugins]]
repo = 'romainl/Apprentice'
hook_add = '''
    augroup vimrc
        autocmd!
        " see also: https://github.com/romainl/Apprentice/pull/17
        autocmd BufWinEnter * hi Comment ctermfg=245
    augroup END
'''


#----------------------------------------------------------
# Comment out
#----------------------------------------------------------

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
    if !exists('g:tcomment_types')
        let g:tcomment_types = {}
    endif
    let g:tcomment_types['fsharp'] = '// %s'
    let g:tcomment_types['mql4'] = '// %s'
'''


#----------------------------------------------------------
# Indent
#----------------------------------------------------------

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black ctermbg=0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=black ctermbg=0
'''


#----------------------------------------------------------
# QuickRun
#----------------------------------------------------------

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    set splitright

    let g:quickrun_config = {}

	let g:quickrun_config._ = {
        \  'runner'                          : 'vimproc'
        \ ,'runner/vimproc/updatetime'       : 60
        \ ,'hook/time/enable'                : 1
        \ ,'hook/time/format'                : "\n*** time : %g s ***"
        \ ,'hook/time/dest'                  : ''
        \ ,"outputter/buffer/split"          : 'vertical'
        \ ,'outputter/buffer/close_on_empty' : 1
    \}

	let g:quickrun_config.bashCheck = {
        \  'exec'   :  [ '%c -n %s:p:r.bash' ]
        \ ,'command':  'bash'
        \ ,'hook/time/enable': 0
        \ ,"outputter/buffer/close_on_empty" : 1
        \ ,"outputter" : 'quickfix'
        \ ,'outputter/buffer/split' : ':set splitblow',
    \}

	let g:quickrun_config.fsharp = {
        \  'command'                         : 'fsharpi --readline-'
        \ ,'tempfile'                        : '%{tempname()}.fsx'
        \ ,'runner'                          : 'concurrent_process'
        \ ,'runner/concurrent_process/load'  : '#load "%S";;'
        \ ,'runner/concurrent_process/prompt': '> '
    \}

	let g:quickrun_config.fsharpCheck = {
        \  'command'                         : 'fsharpi --readline-'
        \ ,'tempfile'                        : '%{tempname()}.fsx'
        \ ,'runner'                          : 'concurrent_process'
        \ ,'runner/concurrent_process/load'  : '#load "%S";;'
        \ ,'runner/concurrent_process/prompt': '> '
        \ ,'hook/time/enable': 0
        \ ,"outputter/buffer/close_on_empty" : 1
        \ ,"outputter" : 'quickfix'
        \ ,'outputter/buffer/split' : ':set splitblow',
    \}

	let g:quickrun_config.fsharpi = {
        \  'exec'   :  [ '%c %s:p:r.fsx' ]
        \ ,'command':  'fsharpi'
        \ ,'args'   :  '%{input("args> ")}'
    \}

	let g:quickrun_config.python = {
        \ 'command': 'python3'
    \}
'''
